--- a/config.def.h	2021-05-28 18:56:46.465369843 +0300
+++ b/config.def.h	2021-05-28 18:58:56.082527076 +0300
@@ -1,5 +1,9 @@
 /* See LICENSE file for copyright and license details. */
 
+/* bar */
+static char statussep               = ';';  /* separator between status bars */
+static int ebalign                  = 1;    /* extrabar alignment: 0 - left, 1 - right, 2 - center */
+
 /* appearance */
 static unsigned int borderpx        = 2;    /* border pixel of windows */
 static unsigned int snap            = 2;    /* snap pixel */
--- a/drw.h	2021-03-06 15:36:47.403422601 +0300
+++ b/drw.h	2021-05-28 19:09:56.171693995 +0300
@@ -12,7 +12,7 @@ typedef struct Fnt {
 	struct Fnt *next;
 } Fnt;
 
-enum { ColFg, ColBg, ColBorder }; /* Clr scheme index */
+enum { ColFg, ColBg, ColBorder, ColCount }; /* Clr scheme index */
 typedef XftColor Clr;
 
 typedef struct {
--- ./dwm.c_before_bar	2021-06-03 18:12:15.776102338 +0300
+++ ./dwm.c	2021-06-03 18:27:27.801056226 +0300
@@ -126,6 +126,9 @@ struct Monitor {
 	int nmaster;
 	int num;
 	int by;               /* bar geometry */
+	int tw;               /* bar text width */
+	int eby;              /* extra bar geometry */
+	int etw;              /* extra bar text width */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
 	unsigned int seltags;
@@ -138,6 +141,7 @@ struct Monitor {
 	Client *stack;
 	Monitor *next;
 	Window barwin;
+	Window extrabarwin;
 	const Layout *lt[2];
 	Pertag *pertag;
 	unsigned int alttag;
@@ -271,9 +275,15 @@ static int xerrordummy(Display *dpy, XEr
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 
+#include "patch/include/include.h"
+
 /* variables */
 static const char broken[] = "broken";
-static char stext[256];
+static char stext[2048];
+static char rawstext[2048];
+static char estext[2048];
+static char rawestext[2048];
+
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh, blw = 0;      /* bar geometry */
@@ -309,6 +319,8 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+#include "patch/include/include.c"
+
 struct Pertag {
 	unsigned int curtag, prevtag; /* current and previous tag */
 	int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
@@ -485,6 +497,8 @@ void
 buttonpress(XEvent *e)
 {
 	unsigned int i, x, click, occ = 0;
+	int padding = 0;
+	unsigned int xc;
 	Arg arg = {0};
 	Client *c;
 	Monitor *m;
@@ -512,10 +526,68 @@ buttonpress(XEvent *e)
 			arg.ui = 1 << i;
 		} else if (ev->x < x + blw)
 			click = ClkLtSymbol;
-		else if (ev->x > selmon->ww - TEXTW(stext))
+		else if (ev->x > selmon->ww - selmon->tw + padding)
+		{
 			click = ClkStatusText;
+			xc = selmon->ww - selmon->tw + padding;
+			char *text = rawstext;
+			int i = -1;
+			char ch;
+			dwmblockssig = -1;
+			while (text[++i]) {
+				if ((unsigned char)text[i] < ' ') {
+					ch = text[i];
+					text[i] = '\0';
+					xc += status2dtextlength(text);
+					text[i] = ch;
+					text += i+1;
+					i = -1;
+					if (xc >= ev->x && dwmblockssig != -1)
+						break;
+					dwmblockssig = ch;
+				}
+			}
+			if (dwmblockssig == -1)
+				dwmblockssig = 0;
+		}
 		else
 			click = ClkWinTitle;
+	} else if (ev->window == selmon->extrabarwin) {
+		i = x = 0;
+		padding = 0;
+		if (
+			(ebalign == 0 && ev->x >= 0 && ev->x < selmon->etw) ||
+			(ebalign == 1 && ev->x > selmon->ww - selmon->etw + padding) ||
+			(ebalign == 2 && ev->x > (selmon->ww / 2 - selmon->etw / 2 + padding)
+			              && ev->x < (selmon->ww / 2 + selmon->etw / 2 - padding))
+		) {
+			click = ClkStatusText;
+			if (ebalign == 0)
+				xc = 0; // left
+			else if (ebalign == 1)
+				xc = selmon->ww - selmon->etw + padding; // right
+			else
+				xc = selmon->ww / 2 - selmon->etw / 2 + padding; // center
+			char *text = rawestext;
+			int i = -1;
+			char ch;
+			dwmblockssig = -1;
+			while (text[++i]) {
+				if ((unsigned char)text[i] < ' ') {
+					ch = text[i];
+					text[i] = '\0';
+					xc += status2dtextlength(text);
+					text[i] = ch;
+					text += i+1;
+					i = -1;
+					if (xc >= ev->x && dwmblockssig != -1)
+						break;
+					dwmblockssig = ch;
+				}
+			}
+			if (dwmblockssig == -1)
+				dwmblockssig = 0;
+		}
 	} else if ((c = wintoclient(ev->window))) {
 		focus(c);
 		restack(selmon);
@@ -557,9 +629,11 @@ cleanup(void)
 		cleanupmon(mons);
 	for (i = 0; i < CurLast; i++)
 		drw_cur_free(drw, cursor[i]);
-	for (i = 0; i < LENGTH(colors); i++)
+	for (i = 0; i < LENGTH(colors) + 1; i++)
 		free(scheme[i]);
+	free(scheme);
 	XDestroyWindow(dpy, wmcheckwin);
+	drw_fontset_free(drw->fonts);
 	drw_free(drw);
 	XSync(dpy, False);
 	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
@@ -579,6 +653,10 @@ cleanupmon(Monitor *mon)
 	}
 	XUnmapWindow(dpy, mon->barwin);
 	XDestroyWindow(dpy, mon->barwin);
+	if (mon->extrabarwin) {
+		XUnmapWindow(dpy, mon->extrabarwin);
+		XDestroyWindow(dpy, mon->extrabarwin);
+	}
 	free(mon);
 }
 
@@ -641,6 +719,8 @@ configurenotify(XEvent *e)
 					if (c->isfullscreen)
 						resizeclient(c, m->mx, m->my, m->mw, m->mh);
 				XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+				if (m->extrabarwin)
+					XMoveResizeWindow(dpy, m->extrabarwin, m->wx, m->eby, m->ww, bh);
 			}
 			focus(NULL);
 			arrange(NULL);
@@ -715,18 +795,22 @@ createmon(void)
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
-	m->pertag = ecalloc(1, sizeof(Pertag));
+
+	if (!(m->pertag = (Pertag *)calloc(1, sizeof(Pertag))))
+		die("fatal: could not malloc() %u bytes\n", sizeof(Pertag));
 	m->pertag->curtag = m->pertag->prevtag = 1;
 
 	for (i = 0; i <= LENGTH(tags); i++) {
+		/* init nmaster */
 		m->pertag->nmasters[i] = m->nmaster;
+		/* init mfacts */
 		m->pertag->mfacts[i] = m->mfact;
+		/* init showbar */
+		m->pertag->showbars[i] = m->showbar;
 
 		m->pertag->ltidxs[i][0] = m->lt[0];
 		m->pertag->ltidxs[i][1] = m->lt[1];
 		m->pertag->sellts[i] = m->sellt;
-
-		m->pertag->showbars[i] = m->showbar;
 	}
 
 	return m;
@@ -783,17 +867,15 @@ dirtomon(int dir)
 void
 drawbar(Monitor *m)
 {
-	int x, w, wdelta, sw = 0;
-	int boxs = drw->fonts->h / 9;
-	int boxw = drw->fonts->h / 6 + 2;
+	int x, w, wdelta;
+	int stw = 0, stp = 0, invert;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
 		drw_setscheme(drw, scheme[SchemeNorm]);
-		sw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - sw, 0, sw, bh, 0, stext, 0);
+		m->tw = drawstatusbar(m, bh, stext, stw, stp, 1);
 	}
 
 	for (c = m->clients; c; c = c->next) {
@@ -803,6 +885,7 @@ drawbar(Monitor *m)
 	}
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
+		invert = urg & 1 << i;
 		/* do not draw vacant tags */
 		if (!(occ & 1 << i || m->tagset[m->seltags] & 1 << i))
 		continue;
@@ -810,25 +893,44 @@ drawbar(Monitor *m)
 		w = TEXTW(tags[i]);
 		wdelta = selmon->alttag ? abs(TEXTW(tags[i]) - TEXTW(tagsalt[i])) / 2 : 0;
 		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, wdelta + lrpad / 2, (selmon->alttag ? tagsalt[i] : tags[i]), urg & 1 << i);
+		drw_text(drw, x, 0, w, bh, wdelta + lrpad / 2, (selmon->alttag ? tagsalt[i] : tags[i]), invert);
 		x += w;
 	}
 	w = blw = TEXTW(m->ltsymbol);
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
-	if ((w = m->ww - sw - x) > bh) {
+	if ((w = m->ww - m->tw - stw - x) > bh)
+	{
 		if (m->sel) {
 			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
+			XSetErrorHandler(xerrordummy);
 			drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
-			if (m->sel->isfloating)
-				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
+			XSync(dpy, False);
+			XSetErrorHandler(xerror);
 		} else {
 			drw_setscheme(drw, scheme[SchemeNorm]);
 			drw_rect(drw, x, 0, w, bh, 1, 1);
 		}
 	}
-	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
+	drw_map(drw, m->barwin, 0, 0, m->ww - stw, bh);
+
+	if (m == selmon && m->extrabarwin)
+	{ /* extra status is only drawn on selected monitor */
+		drw_setscheme(drw, scheme[SchemeNorm]);
+		drw_rect(drw, 0, 0, m->ww, bh, 1, 1);
+
+		w = drawstatusbar(m, bh, estext, 0, 0, ebalign);
+		m->etw = w;
+		drw_map(drw, m->extrabarwin, 0, 0, m->ww, bh);
+	}
+	else { /* clear status on other monitors */
+		drw_setscheme(drw, scheme[SchemeNorm]);
+		/* without this, bar content will be drawn in extrabar */
+		drw_rect(drw, 0, 0, m->ww, bh, 1, 1);
+		/* hides all extrabar content */
+		drw_map(drw, m->extrabarwin, 0, 0, m->ww, bh);
+	}
 }
 
 void
@@ -1756,9 +1858,10 @@ setup(void)
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
 	cursor[CurMove] = drw_cur_create(drw, XC_fleur);
 	/* init appearance */
-	scheme = ecalloc(LENGTH(colors), sizeof(Clr *));
+	scheme = ecalloc(LENGTH(colors) + 1, sizeof(Clr *));
+	scheme[LENGTH(colors)] = drw_scm_create(drw, colors[0], ColCount);
 	for (i = 0; i < LENGTH(colors); i++)
-		scheme[i] = drw_scm_create(drw, colors[i], 3);
+		scheme[i] = drw_scm_create(drw, colors[i], ColCount);
 	/* init bars */
 	updatebars();
 	updatestatus();
@@ -1952,18 +2055,11 @@ togglealttag()
 void
 togglebar(const Arg *arg)
 {
-	unsigned int i;
 	selmon->showbar = !selmon->showbar;
-	for(i=0; i<LENGTH(tags); ++i)
-		if(selmon->tagset[selmon->seltags] & 1<<i)
-			selmon->pertag->showbars[i+1] = selmon->showbar;
-
-	if(selmon->pertag->curtag == 0)
-	{
-		selmon->pertag->showbars[0] = selmon->showbar;
-	}
 	updatebarpos(selmon);
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
+	if (selmon->extrabarwin)
+		XMoveResizeWindow(dpy, selmon->extrabarwin, selmon->wx, selmon->eby, selmon->ww, bh);
 	arrange(selmon);
 }
 
@@ -2125,6 +2221,7 @@ unmapnotify(XEvent *e)
 void
 updatebars(void)
 {
+	unsigned int w;
 	Monitor *m;
 	XSetWindowAttributes wa = {
 		.override_redirect = True,
@@ -2133,14 +2230,24 @@ updatebars(void)
 	};
 	XClassHint ch = {"dwm", "dwm"};
 	for (m = mons; m; m = m->next) {
-		if (m->barwin)
-			continue;
-		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, DefaultDepth(dpy, screen),
-				CopyFromParent, DefaultVisual(dpy, screen),
-				CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
-		XDefineCursor(dpy, m->barwin, cursor[CurNormal]->cursor);
-		XMapRaised(dpy, m->barwin);
-		XSetClassHint(dpy, m->barwin, &ch);
+		if (!m->barwin) {
+			w = m->ww;
+			m->barwin = XCreateWindow(dpy, root, m->wx, m->by, w, bh, 0, DefaultDepth(dpy, screen),
+					CopyFromParent, DefaultVisual(dpy, screen),
+					CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
+			XDefineCursor(dpy, m->barwin, cursor[CurNormal]->cursor);
+			XMapRaised(dpy, m->barwin);
+			XSetClassHint(dpy, m->barwin, &ch);
+		}
+		if (!m->extrabarwin)
+		{
+			m->extrabarwin = XCreateWindow(dpy, root, m->wx, m->eby, m->ww, bh, 0, DefaultDepth(dpy, screen),
+					CopyFromParent, DefaultVisual(dpy, screen),
+					CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
+			XDefineCursor(dpy, m->extrabarwin, cursor[CurNormal]->cursor);
+			XMapRaised(dpy, m->extrabarwin);
+			XSetClassHint(dpy, m->extrabarwin, &ch);
+		}
 	}
 }
 
@@ -2149,12 +2256,20 @@ updatebarpos(Monitor *m)
 {
 	m->wy = m->my;
 	m->wh = m->mh;
+	int num_bars;
+	int has_extrabar = 1;
+	num_bars = m->showbar * (1 + has_extrabar);
+	m->wh = m->wh - bh * num_bars;
+	m->wy = m->showbar ? m->wy + bh : m->wy;
 	if (m->showbar) {
-		m->wh -= bh;
-		m->by = m->topbar ? m->wy : m->wy + m->wh;
-		m->wy = m->topbar ? m->wy + bh : m->wy;
-	} else
+		m->by = m->topbar ? m->wy - bh : m->wy + m->wh;
+		if (has_extrabar)
+			m->eby = m->topbar ? m->wy + m->wh : m->wy - bh;
+	} else {
 		m->by = -bh;
+		if (has_extrabar)
+			m->eby = -bh;
+	}
 }
 
 void
@@ -2311,8 +2426,20 @@ updatesizehints(Client *c)
 void
 updatestatus(void)
 {
-	if (!gettextprop(root, XA_WM_NAME, stext, sizeof(stext)))
+	if (!gettextprop(root, XA_WM_NAME, rawstext, sizeof(rawstext))) {
 		strcpy(stext, "dwm-"VERSION);
+		estext[0] = '\0';
+	} else {
+		char *e = strchr(rawstext, statussep);
+		if (e) {
+			*e = '\0'; e++;
+			strncpy(rawestext, e, sizeof(estext) - 1);
+			copyvalidchars(estext, rawestext);
+		} else {
+			estext[0] = '\0';
+		}
+		copyvalidchars(stext, rawstext);
+	}
 	drawbar(selmon);
 }
 
@@ -2439,7 +2566,7 @@ wintomon(Window w)
 	if (w == root && getrootptr(&x, &y))
 		return recttomon(x, y, 1, 1);
 	for (m = mons; m; m = m->next)
-		if (w == m->barwin)
+		if (w == m->barwin || w == m->extrabarwin)
 			return m;
 	if ((c = wintoclient(w)))
 		return c->mon;
